import os
import pandas as pd
data_folder = os.path.join(os.path.expanduser("~"), "data", "datasets", "ml-100k")
ratings_filename = os.path.join(data_folder, "u.data")
frequent_itemsets[1] = dict((frozenset((movie_id,)), row["Favorable"])
                            for movie_id, row in num_favorable_by_movie.iterrows()
                            if row["Favorable"] > min_support)
from collections import defaultdict
def find_frequent_itemsets(favorable_reviews_by_users, k_1_itemsets, min_support):
    counts = defaultdict(int)
    for user, reviews in favorable_reviews_by_users.items():
        for itemset in k_1_itemsets:
            if itemset.issubset(reviews):
                for other_reviewed_movie in reviews - itemset:
                    current_superset = itemset | frozenset((other_reviewed_movie,))
                    counts[current_superset] += 1
    return dict([(itemset, frequency) for itemset, frequency in counts.items() if frequency >= min_support])
import sys
frequent_itemsets = {}  # مجموعه اقلام پر تکرار
min_support = 50

# k=1 candidates are the isbns with more than min_support favourable reviews
frequent_itemsets[1] = dict((frozenset((movie_id,)), row["Favorable"])
                                for movie_id, row in num_favorable_by_movie.iterrows()
                                if row["Favorable"] > min_support)

print("وجود دارد {} فیلم با بیش از {} نقد مطلوب".format(len(frequent_itemsets[1]), min_support))
sys.stdout.flush()
for k in range(2, 20):
    # Generate candidates of length k, using the frequent itemsets of length k-1
    # Only store the frequent itemsets
    cur_frequent_itemsets = find_frequent_itemsets(favorable_reviews_by_users, frequent_itemsets[k-1],
                                                   min_support)
    if len(cur_frequent_itemsets) == 0:
        print("هیچ مجموعه اقلام پر تکرار با طول {} پیدا نشد ".format(k))
        sys.stdout.flush()
        break
    else:
        print("من پیدا کردم {} مجموعه اقلام پر تکرار با طول {}".format(len(cur_frequent_itemsets), k))
        #print(cur_frequent_itemsets)
        sys.stdout.flush()
        frequent_itemsets[k] = cur_frequent_itemsets
# We aren't interested in the itemsets of length 1, so remove those
del frequent_itemsets[1]
# ایجاد قواعد وابستگی کاندید
candidate_rules = []
for itemset_length, itemset_counts in frequent_itemsets.items():
    for itemset in itemset_counts.keys():
        for conclusion in itemset:
            premise = itemset - set((conclusion,))
            candidate_rules.append((premise, conclusion))
print("{}  قاعده کاندید وجود دارد".format(len(candidate_rules)))
# محاسبه اطمیان هر قاعده
correct_counts = defaultdict(int)
incorrect_counts = defaultdict(int)
for user, reviews in favorable_reviews_by_users.items():
    for candidate_rule in candidate_rules:
        premise, conclusion = candidate_rule
        if premise.issubset(reviews):
            if conclusion in reviews:
                correct_counts[candidate_rule] += 1
            else:
                incorrect_counts[candidate_rule] += 1
rule_confidence = {candidate_rule: correct_counts[candidate_rule] / float(correct_counts[candidate_rule] + incorrect_counts[candidate_rule])
              for candidate_rule in candidate_rules}
# انتخاب قواعد دارای اطمینان بالاتر از آستانه
min_confidence = 0.9
# حذف قواعد با اطمینان ضعیف
rule_confidence = {rule: confidence for rule, confidence in rule_confidence.items() if confidence > min_confidence}
print(len(rule_confidence))
from operator import itemgetter
sorted_confidence = sorted(rule_confidence.items(), key=itemgetter(1), reverse=True)
for index in range(5):
    print("قاعده #{0}".format(index + 1))
    (premise, conclusion) = sorted_confidence[index][0]
    print("قاعده: اگر فردی پیشنهاد کند {0} پیشنهاد می کند {1}".format(premise, conclusion))
    print(" - اطمینان: {0:.3f}".format(rule_confidence[(premise, conclusion)]))
    print("")
def get_movie_name(movie_id):
    title_object = movie_name_data[movie_name_data["MovieID"] == movie_id]["Title"]
    title = title_object.values[0]
    return title
for index in range(5):
    print("قاعده #{0}".format(index + 1))
    (premise, conclusion) = sorted_confidence[index][0]
    premise_names = ", ".join(get_movie_name(idx) for idx in premise)
    conclusion_name = get_movie_name(conclusion)
    print("قاعده: اگر فردی پیشنهاد می کند {0} پیشنهاد خواهد کرد {1}".format(premise_names, conclusion_name))
    print(" - اطمینان: {0:.3f}".format(rule_confidence[(premise, conclusion)]))
    print("")
# ارزیابی با استفاده از مجموعه آزمون
test_dataset = all_ratings[~all_ratings['UserID'].isin(range(200))]
test_favorable = test_dataset[test_dataset["Favorable"]]
test_favorable_by_users = dict((k, frozenset(v.values)) for k, v in test_favorable.groupby("UserID")["MovieID"])
correct_counts = defaultdict(int)
incorrect_counts = defaultdict(int)
for user, reviews in test_favorable_by_users.items():
    for candidate_rule in candidate_rules:
        premise, conclusion = candidate_rule
        if premise.issubset(reviews):
            if conclusion in reviews:
                correct_counts[candidate_rule] += 1
            else:
                incorrect_counts[candidate_rule] += 1
for index in range(10):
    print("قاعده #{0}".format(index + 1))
    (premise, conclusion) = sorted_confidence[index][0]
    premise_names = ", ".join(get_movie_name(idx) for idx in premise)
    conclusion_name = get_movie_name(conclusion)
    print("قاعده: اگر فردی پیشنهاد کند {0} پیشنهاد خواهد کرد {1}".format(premise_names, conclusion_name))
    print(" - اطمینان آموزش: {0:.3f}".format(rule_confidence.get((premise, conclusion), -1)))
    print(" - اطمینان آزمون: {0:.3f}".format(test_confidence.get((premise, conclusion), -1)))
    print("")
